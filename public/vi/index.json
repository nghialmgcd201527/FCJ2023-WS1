[
{
	"uri": "/vi/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng \u0026ldquo;Todo app\u0026rdquo; với Serverless Tổng quan Trong bài workshop này, chúng ta sẽ tạo một ứng dụng \u0026ldquo;Todo app\u0026rdquo; bằng Serverless cùng API để lưu trữ và truy xuất dữ liệu trên Cloud. Ngoài ra, chúng ta sẽ kết hợp Machine Learning để xác định những từ khóa liên quan đến images mà các bạn tải lên cho từng Task.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Mô hình kiến trúc của ứng dụng Todo app sử dụng AWS Lamba, Amazon API Gateway, Amazon DynamoDB, Amazon Simple Storage Service (S3) và AWS Amplify Console. Amplify Console được dùng để phục vụ cho việc triển khai liên tục (Continuos Deployment - CD) và quản lí tài nguyên cho một trang web tĩnh bao gồm HTML, CSS, JavaScript và file ảnh được tải lên từ người dùng trên trình duyệt. Trong đó, JavaScript thực thi việc gửi và nhận dữ liệu từ một public backend API được xây dựng bởi Lambda và API Gateway. DynamoDB cung cấp persistence layer nơi mà dữ liệu được lưu trữ bằng Lambda function từ API. S3 được sử dụng để lưu trữ các file image được tải lên. Và cuối cùng là Amazon Rekognition, được dùng để nhận diện những thuộc tính và gắn các thuộc tính đó vào những file image trên.\n"
},
{
	"uri": "/vi/3-serverlessbackend/3.1-dynamodb/",
	"title": "Khai báo Table trong DynamoDB",
	"tags": [],
	"description": "",
	"content": "Amazon DynamoDB là gì? Amazon DynamoDB là một cặp key-value serverless và là một loại cơ sở dữ liệu phi quan hệ (Non-SQL) mang lại hiệu suất một phần nghìn giây ở mọi quy mô.\nTương tự với những cơ sở dữ liệu khác, Amazon DynamoDB sẽ lưu trữ data bằng các bảng. Trong ứng dụng của chúng ta, chúng ta sẽ lưu trữ thông tin của các tasks trong bảng của DynamoDB. Bảng này sẽ được truy cập bằng Lambda function bằng sự phản hồi đến API từ ứng dụng web của chúng ta.\nChúng ta sẽ sử dụng SAM để khởi tạo DynamoDB table.\nThêm DynamoDB table vào SAM template Dòng AWS:DynamoDB::Table được dụng để định nghĩa DynamoDB table.\nHãy vào file template.yaml trong thư mục sam, thêm đoạn code dưới đây vào mục Resource và bên dưới function MyAuthFunction.\n# Create DynamoDB table\rTasksTable:\rType: AWS::DynamoDB::Table\rProperties:\rAttributeDefinitions:\r- AttributeName: \u0026#34;user\u0026#34;\rAttributeType: \u0026#34;S\u0026#34;\r- AttributeName: \u0026#34;id\u0026#34;\rAttributeType: \u0026#34;S\u0026#34;\rKeySchema:\r- AttributeName: \u0026#34;user\u0026#34;\rKeyType: \u0026#34;HASH\u0026#34;\r- AttributeName: \u0026#34;id\u0026#34;\rKeyType: \u0026#34;RANGE\u0026#34;\rBillingMode: PAY_PER_REQUEST Trước hết bạn sẽ có AttributeDefinitions là nơi định nghĩa những thuộc tính (columns) trong bảng DynamoDB. Trong bảng của chúng ta, có 2 thuộc tính được định nghĩa là users và id. Cả 2 đều thuộc kiểu string (AttributeType: \u0026quot;S\u0026quot;).\nKeySchema định nghĩa khóa chính của table. Khóa chính của table là sự kết hợp của 2 thuộc tính user và id. user là hash key (KeyType: \u0026quot;HASH\u0026quot;) và id là range key (KeyType: \u0026quot;RANGE\u0026quot;). Điều này cho biết rằng bảng sẽ được quản lí, phân vùng dựa trên thuộc tính user và id.\nBillingMode: PAY_PER_REQUEST xác định cách thanh toán cho table đó là thanh toán theo yêu cầu.\nCú pháp trong YAML có phân biệt khoảng trắng, vì vậy hãy chắc chắn rằng phạm vi của function TasksTable được thụt lề vào sâu hơn so với phạm vi của Resources.\nChúng ta sẽ có kết quả như hình bên dưới.\nĐể biết thêm thông tin về AWS::Serverless::Table, hãy tham khảo resource của SAM tại đây.\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createcloud9workspace/",
	"title": "Tạo Cloud9 Workspace",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Cloud9 Nhập Cloud9 ở thanh tìm kiếm service trên AWS Console sau đó chọn Cloud9. Chọn Create environment Đặt tên cho Cloud9 Workspace là serverless-workshop. Ở mục Description hãy nhập mục đích bạn muốn sử dụng trong workspace này. Nhập deploy \u0026ldquo;Todos app\u0026rdquo; Environment type, ở đây chúng ta sẽ tạo một server để chạy Cloud9 workspace này. Mình sẽ chọn option New EC2 instance để tạo một server mới. Sang phần setting cho New EC2 instance, chọn Additional instance types sau đó chúng ta chọn loại t3.medium. Giữ nguyên mặc định cho những thiết lập khác. Click Create và đợi khoảng 10 phút để Cloud9 Workspace được tạo. Khi Cloud9 Workspace được tạo xong, chúng ta sẽ có một môi trường để làm việc với AWS CLI và các công cụ khác.\nTrong danh sách các Environments được tạo ra, hãy tìm environment serverless-workshop và click vào nút Open để mở môi trường Cloud9. Sau khi môi trường mở ra, chúng ta hãy tắt những phần bên dưới đã được khởi tạo lúc bắt đầu và tạo một trang terminal mới. Workspace của chúng ta sẽ trông như thế này.\n"
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rHãy nhớ rằng Cloud9 workspace chỉ nên được tạo ra bởi IAM user (hoặc là được gán vào một IAM role thích hợp) với đặc quyền của Admin, không được dùng root user.\nCloud9 Workspace Chúng ta thường dùng môi trường phát triển tích hợp (Integrated Development Environment - IDE) ở local, trong bài workshop này, chúng ta sẽ dùng Cloud9. Nó là một IDE chạy trên cloud sử dụng trình duyệt, bao gồm những tính năng quan trọng, thiết yếu ở local IDE mà chúng ta thường dùng như viết, chạy, debug code. Cloud9 đã được trang bị sẵn những gói tệp tin như JavaScript, Python, NodeJS và những thứ khác ở đây\nĐể các dịch vụ của AWS phản hồi nhanh hơn, hãy chọn Region gần nhất trong suốt buổi workshop.\nCác vùng hỗ trợ service Amazon Rekognition Hãy lưu ý rằng không phải tất cả các service của AWS luôn có sẵn tại tất cả các vùng. Trong bài workshop này, chúng ta sẽ sử dụng service Amazon Rekognition, nó sẽ chỉ phục vụ cho các vùng dưới đây:\nUS East (Ohio) us-east-2 US East (N. Virginia) us-east-1 US West (N. California) us-west-1 US West (Oregon) us-west-2 Asia Pacific (Mumbai) ap-south-1 Asia Pacific (Seoul) ap-northeast-2 Asia Pacific (Singapore) ap-southeast-1 Asia Pacific (Sydney) ap-southeast-2 Asia Pacific (Tokyo) ap-northeast-1 Canada (Central) ca-central-1 Europe (Frankfurt) eu-central-1 Europe (Ireland) eu-west-1 Europe (London) eu-west-2 Xem thêm cập nhật mới nhất về Amazon Rekognition\nNội dung Tạo Cloud9 Workspace Cài đặt Amplify CLI "
},
{
	"uri": "/vi/2-prerequiste/2.2-ensurenodejsversion/",
	"title": "Ensure Node.js Version",
	"tags": [],
	"description": "",
	"content": "Cloud9 đã cài đặt sẵn Node.js nhưng có thể nó sẽ không tương thích với thời điểm mình làm bài workshop này. Để đảm bảo được điều này, các bạn hãy cài đặt Node.js v16 (codename Gallium) bằng cách chạy lệnh sau trong terminal của Cloud9.\nChúng ta hãy kiểm tra phiên bản Node.js hiện tại đang chạy trên Cloud9 bằng lệnh sau:\nnode --version Đây là phiên bản Node.js mà mình đang sử dụng trong workshop này.\nNếu phiên bản Node.js mà bạn đang sử dụng là v16.x thì bạn có thể bỏ qua bước này và đến phần Clone Git repository. Nếu phiên bản mà bạn đang sử dụng khác phiên bản trên thì hãy theo dõi các bước sau để cài đặt phiên bản Node.js phù hợp với workshop này bằng trang terminal vừa tạo.\nỞ trang terminal trên Cloud9, hãy chạy lệnh sau để đảm bảo rằng bạn đã cài đặt phiên bản mới nhất của Node.js Version Manager (nvm) (ở thời điểm mình viết workshop, đang là version 0.39.0).\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash Tiếp theo chúng ta sẽ cài đặt Node.js v16 \u0026ldquo;Gallium\u0026rdquo;:\nnvm install \u0026#39;lts/gallium\u0026#39; Cuối cùng, chúng ta sẽ chọn phiên bản Node.js trên là phiên bản mặc định:\nnvm alias default \u0026#39;lts/gallium\u0026#39; Hãy xem lại phiên bản Node.js đang chạy trên Cloud9 bằng lệnh sau:\nnode --version Kết quả chúng ta cần là bắt đầu bằng v16.\n"
},
{
	"uri": "/vi/3-serverlessbackend/3.2-lambdafunction/",
	"title": "Tạo Lambda function",
	"tags": [],
	"description": "",
	"content": "AWS Lambda là gì? AWS Lambda là một dịch vụ serverless nó sẽ thực thi những dòng code mà không cần phải chuẩn bị và quản lí servers. Lambda tự động phân bổ dung lượng máy tính và chạy code của bạn dựa vào những yêu cầu hoặc sự kiện được gửi đến trong tất cả các môi trường, các điều kiện.\nCách nó hoạt động:\nTải code của bạn lên AWS Lambda hoặc viết code trên trình chỉnh sửa của Lambda. (Trong workshop này, chúng ta sẽ viết code và tải lên bằng SAM) Cài đặt code của bạn cho phép trigger từ những AWS services khác, từ HTTP endpoints, hay là những hoạt động xảy ra bên trong ứng dụng. AWS Lambda sẽ thực thi code của bạn khi trigger được kích hoạt, sau đó nó sẽ tự động quản lí tài nguyên tính toán cho code của bạn. Chỉ trả tiền cho thời gian thực thi code của bạn (và số lượng tài nguyên tính toán mà code của bạn sử dụng). Phân tích một Lambda function Lambda function handler là một hàm trong code của bạn, nó sẽ xử lí các events. Khi một chức năng được gọi, Lambda sẽ thực thi hàm handler. Khi hàm handler kết thúc và return response, nó sẽ sẵn sàng thực hiện những events khác.\nVí dụ về cấu trúc của Lambda function:\nexports.handler = async (event) =\u0026gt; {\r// TODO implement\rconst response = {\rstatusCode: 200,\rbody: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;),\r};\rreturn response;\r}; Ở đây, event là request được gửi đến và response là kết quả trả về.\nTạo Lambda function Truy cập đến đường dẫn sam/src/handlers/createTask và chọn file tên là app.js, coppy và paste đoạn code sau vào file:\nconst { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;)\rconst { DynamoDBDocumentClient, PutCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;)\rconst uuid = require(\u0026#39;uuid\u0026#39;)\rconst ddbClient = new DynamoDBClient()\rconst ddbDocClient = DynamoDBDocumentClient.from(ddbClient)\rconst tableName = process.env.TASKS_TABLE\rexports.handler = async (event) =\u0026gt; {\rconsole.info(\u0026#39;received:\u0026#39;, event)\rconst body = JSON.parse(event.body)\rconst user = event.requestContext.authorizer.principalId\rconst id = uuid.v4()\rconst title = body.title\rconst bodyText = body.body\rconst createdAt = new Date().toISOString()\rlet dueDate = createdAt\rif (\u0026#39;dueDate\u0026#39; in body) {\rdueDate = body.dueDate\r}\rconst params = {\rTableName: tableName,\rItem: { user: `user#${user}`, id: `task#${id}`, title: title, body: bodyText, dueDate: dueDate, createdAt: createdAt }\r}\rconsole.info(`Writing data to table ${tableName}`)\rconst data = await ddbDocClient.send(new PutCommand(params))\rconsole.log(\u0026#39;Success - item added or updated\u0026#39;, data)\rconst response = {\rstatusCode: 200,\rheaders: {\r\u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;\r},\rbody: JSON.stringify(data)\r}\rreturn response\r} Đoạn code này đã import thư viện AWS SDK cho DynamoDB, thư viện uuid cho việc nhận dạng, cài đặt DynamoDB client.\nLambda function được khởi tạo với exports.handler, nó đóng vai trò như một entry point của function. Nó lấy object envent làm tham số đầu vào và trả về một object response.\nNó tạo ra object params với những yếu tố cần thiết, bao gồm tên của DynamoDB table, thuộc tính của item trong table (user, id, title, bodyText, dueDate, createdAt).\nFunction ghi lại dữ liệu vào DynamoDB table bằng PutCommand và logs ra lời nhắn thành công.\nResponse sẽ trả về một object với statusCode là 200, đặt headers với CORS và body là dữ liệu được ghi lại.\nTóm lại, Đoạn code này phục vụ cho việc tạo và cập nhật task trong DynamoDB table dựa vào việc gửi request API. Nó tận dụng AWS SDK dành cho DynamoDB, Node.js và AWS Lambda để cung cấp giải pháp quản lý tác vụ của serverless và mở rộng quy mô.\nThêm Lambda function vào SAM template Coppy và paste đoạn code dưới đây vào mục Resource trong file template.yml, sau function TasksTable.\nCú pháp trong YAML có phân biệt khoảng trắng, vì vậy hãy chắc chắn rằng phạm vi của function CreateTaskFunction được thụt lề vào sâu hơn so với phạm vi của Resources.\nGiá trị AWS::Serverless::Function được dùng để khởi tạo Lambda function. Thuộc tính CodeUri được dùng để xác định rõ vị trí của file app.js trong thư mục src/handlers/createTask.\n# CreateTask Lambda Function\rCreateTaskFunction:\rType: AWS::Serverless::Function\rProperties:\rCodeUri: src/handlers/createTask\rHandler: app.handler\rPolicies:\r- DynamoDBCrudPolicy:\rTableName: !Ref TasksTable\rEnvironment:\rVariables:\rTASKS_TABLE: !Ref TasksTable\rEvents:\rPostTaskFunctionApi:\rType: Api\rProperties:\rRestApiId: !Ref TasksApi\rPath: /tasks\rMethod: POST\rAuth:\rAuthorizer: MyLambdaTokenAuthorizer Chi tiết và công dụng của các thuộc tính được khai báo ở trên các bạn có thể xem lại ở phần này.\n"
},
{
	"uri": "/vi/2-prerequiste/2.3-clonerepositoryandavoidingfreespace/",
	"title": "Clone Git repository và vấn đề của dung lượng trống Cloud9",
	"tags": [],
	"description": "",
	"content": "Ở trang terminal trên Cloud9, chạy command sau để để clone Git repository serverless-tasks-webapp:\ngit clone https://github.com/aws-samples/serverless-tasks-webapp Sau khi chạy câu lệnh trên, chúng ta sẽ được như hình. Chúng ta sẽ thấy thư mục serverless-tasks-webapp được tạo ra.\nTránh những vấn đề liên quan đến dung lượng trống của Cloud9 Mặc định, dung lượng trống của một Cloud9 instance chỉ tầm khoảng 2GB. Dùng đoạn script dưới đây để tránh tình trạng hết dung lượng và vấn đề trong suốt buổi workshop.\nĐầu tiên, chúng ta sẽ cập nhật phiên bản mới nhất của AWS CLI:\npip install --user --upgrade awscli aws-sam-cli Nếu cập nhật thành công, chúng ta sẽ thấy như hình bên dưới:\nChuyển đến thư mục serverless-tasks-webapp, kiểm tra dung lượng của volume hiện tại bằng lệnh sau:\ncd serverless-tasks-webapp\rdf -h Chúng ta sẽ nhận được kết quả như hình bên dưới:\nfilesystem ở đường dẫn /dev/nvme0n1p1 là volume mà chúng ta đang sử dụng. Chúng ta sẽ thấy dung lượng trống của volume này là 3.5G. Để tránh tình trạng hết dung lượng trong suốt buổi workshop, chúng ta sẽ tăng dung lượng của volume này lên 20G.\nTăng kích thước volume của Amazon EBS lên 20G:\nbash resize.sh 20 Chúng ta sẽ thay output như này:\nBây giờ hãy kiểm tra lại dung lượng của volume hiện tại bằng lệnh sau:\ndf -h Như chúng ta thấy ở đường dẫn /dev/nvme0n1p1, dung lượng trống của volume hiện tại đã tăng lên 14G.\n"
},
{
	"uri": "/vi/3-serverlessbackend/",
	"title": "Xây dựng một serverless backend với AWS Lambda và AWS SAM",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, chúng ta sẽ sử dụng Serverless Application Model (SAM) để xây dựng một quy trình backend để xử lí các yêu cầu từ ứng dụng web. Ứng dụng mà tới đây chúng ta sẽ triển khai cho phép người dùng tạo ra những todo tasks và gán file vào các task đó. Để đáp ứng được những yêu cầu đó, JavaScript đang chạy trên trình duyệt cần nhờ vào một dịch vụ trên cloud.\nBạn sẽ dùng Lambda function để mỗi lần user tạo một task, nó sẽ được gọi thực thi. Funtion này sẽ lưu trữ task vào DynamoDB, sau đó sẽ gửi phản hồi đến phần front-end và cập nhật task mới trên giao diện người dùng.\nFunction được gọi từ trình duyệt bằng Amazon API Gateway. Bạn sẽ triển khai sự kết nối này ở phần sau. Trong phần này, bạn sẽ chỉ kiểm tra function của bạn ở phạm vi cô lập.\nSAM là gì? Serverless Application Model (SAM) là một open-source framework nó sẽ giúp việc triển khai serverless application trở nên dễ dàng hơn. Nó cung cấp một cách đơn giản để định nghĩa các serverless application, và cung cấp một tập các công cụ để triển khai các ứng dụng đó.\nNó cho phép chúng ta xác định rõ những yêu cầu của ứng dụng bằng code. SAM chuyển đổi và mở rộng SAM syntax lên AWS Cloudformation để triển khai ứng dụng của bạn. Bạn sẽ thấy và sử dụng SAM templates throughout this workshop.\nSAM hoạt động như thế nào? AWS SAM dựa trên AWS Cloudformation. Một ứng dụng serverless được định nghĩa bằng một CloudFormation template và được triển khai với CloudFormation stack. Tóm lại, AWS SAM template là CloudFormation template.\nAWS SAM xác định một tập hợp tài nguyên mô tả các components chung của ứng dụng serverless. Để AWS SAM có những objects được định nghĩa trong CloudFormation template thì template đó phải gồm phần Transform trong document root là AWS::Serverless-2016-10-31.\nTrong ứng dụng của chúng ta: Tasks API Tasks API mà chúng ta sẽ xây dựng trong workshop này bao gồm Amazon API Gateway HTTP endpoints để trigger AWS Lambda functions, nó sẽ đọc và ghi dữ liệu đến cơ sở dữ liệu Amazon DynamoDB. SAM template của Tasks API sẽ gồm một bảng DynamoDB, Lambda functions để liệt kê, xem và cập nhật Tasks trong bảng.\nTrong phần này, bạn sẽ làm việc với Lambda function để tạo một task mới. Các thành phần của Tasks API sẽ được định nghĩa trong template.yaml. Tiếp theo chúng ta sẽ đi vào chi tiết cấu trúc của Lambda function.\nPhân tích SAM template Vào thư mục serverless-tasks-web tiếp đến là thư mục sam sau đó mở file template.yaml. Bên dưới là một đoạn code trong file SAM template dùng để liệt kê danh sách các tasks:\nĐây là properties được định nghĩa trong resource AWS:Serverless:Function, chúng ta sẽ bắt đầu tìm hiểu chúng.\nFunctionName\nThuộc tính FunctionName được đặt tên tùy ý cho Lambda function. Nếu chúng ta không đặt tên cho nó, CloudFormation sẽ sử dụng tên của CloudFormation Stack, CloudFormation Resource và random ID.\nCodeUri\nThuộc tính CodeUri chỉ định đường dẫn đến mã nguồn của Lambda function trong workspace liên kết với SAM template trong đường dẫn sam/. Trong ví dụ này, Đoạn code sẽ nằm ở đường dẫn src/handlers/ và getTasks sẽ là function của nó.\nHandler\nThuộc tính Handler chỉ định entry point cho Lambda function. Đối với Javascript, nó sẽ được format dưới dạng file.function, trong đó file là tên file chứa function ko có đuôi là .js thuộc đường dẫn CodeUri được định nghĩa phía trên và function là tên của function trong file đó sẽ được thực thi khi Lambda function được gọi.\nEnvironment\nThuộc tính Environment định nghĩa biến môi trường, nó sẽ có sẵn trong Lambda function. Trong ví dụ này, chúng ta đang định nghĩa một biến môi trường TASKS_TABLE với giá trị là TasksTable. Biến môi trường này sẽ được sử dụng trong Lambda function để truy cập vào DynamoDB table nơi lưu trữ các tasks.\nEvents\nThuộc tính Events định nghĩa các events sẽ trigger Lambda function khi được gọi. Event API được tích hợp với Lambda function cùng API Gateway endpoint, tuy nhiên SAM chỉ hỗ trợ Lambda function triggers từ những nguồn sau.\nAPI event được dùng để xem chi tiết của một Task được định nghĩa ở resource RESTful /tasks và được truy cập khi sử dụng phương pháp HTTP GET. SAM sẽ chuyển đổi API event đến API Gateways để gọi Lambda function.\nNội dung Khai báo Table trong DynamoDB Tạo Lambda function "
},
{
	"uri": "/vi/2-prerequiste/2.4-installamplifycli/",
	"title": "Cài đặt Amplify CLI",
	"tags": [],
	"description": "",
	"content": "Theo AWS, Amplify là một dịch vụ được thiết kế để giúp các nhà phát triển xây dựng các ứng dụng web và mobile nhanh hơn. Amplify cung cấp một tập hợp các công cụ và dịch vụ để xây dựng các ứng dụng web và mobile. Amplify CLI là một phần của Amplify Framework, nó cung cấp các lệnh để tạo và quản lý các tài nguyên AWS như Amazon Cognito, Amazon API Gateway, Amazon Lambda function, Amazon DynamoDB table, và Amazon S3 bucket.\nTrong workshop này, chúng ta sẽ chỉ cấu hình AWS Amplify Hosting, nó cung cấp một dịch vụ có thể quản lí dễ dàng cho việc triển khai các ứng dụng web tĩnh trên toàn cầu. Nó sẽ sử dụng Amazon S3 và Amazon CloudFornt để lưu trữ và phân phối các tài nguyên tĩnh của ứng dụng đó.\nCài đặt phiên bản mới nhất của Amplify CLI bằng cách chạy command sau: npm i -g @aws-amplify/cli Hoàn tất cài đặt Amplify CLI.\nSau khi tải xong, hãy cấu hình cho Amplify CLI: amplify configure Chúng ta sẽ nhận được một đường dẫn https://console.aws.amazon.com/ để đăng nhập vào AWS console.\nSau khi đăng nhập, nhấn Enter và chọn Region mà bạn đang làm workshop, với mình là ap-southeast-1. Sau đó nhấn Enter để tiếp tục, chúng ta sẽ nhận được một đường dẫn https://console.aws.amazon.com/iamv2/home#/users/create để tạo một user IAM mới.\nTruy cập vào đường dẫn trên, đặt tên amplify-user cho user đó, chọn Next.\nMặc định, chúng ta sẽ gán quyền AdministratorAccess cho user được cấu hình cho Amplify CLI\nỞ section Permmissions options, chọn Attach policies directly. Tìm và chọn AdministratorAccess. Sau đó nhấn Next. Ở trang Review and create, chọn Create user.\nTiếp theo, chọn user vừa được tạo amplify-user, chọn tab Security credentials, ở mục Access keys, click vào Create access key.\nỞ bước Access key best practices \u0026amp; alternatives, chọn Command Line Interface (CLI) và tick vào mục Confirm sau đó chọn Next.\nỞ trang Set description tag, hãy nhập mô tả cho Access key tùy theo ý của bạn, mình để mặc định và chọn Create access key. Vậy là bạn đã tạo thành công Access key cho user amplify-user, lưu lại Access key và Secret access key. Quay trở lại terminal ở Cloud9, nhấn Enter, nó sẽ yêu cầu mình nhập Access key và Secret access key vừa tạo. Sau khi nhập xong, nhấn Enter, ở mục Profile name, mình sẽ để default, nhấn tiếp Enter, vậy là đã cấu hình thành công Amplify CLI.\nBây giờ chúng ta đã sẵn sàng để sử dụng Amplify!\n"
},
{
	"uri": "/vi/4-apigateway/",
	"title": "Cấu hình cho API authorization: API Gateway",
	"tags": [],
	"description": "",
	"content": "Lambda Authorizer là gì? Lambda authorizer là một tính năng của API Gateway mà nó sử dụng Lambda function để kiểm soát truy cập tới API của bạn. Đó là một cách để bổ sung bảo mật cho API của bạn.\nLambda Authorizer hoạt động như thế nào? Khi client gửi request đến một trong những chức năng của API thì API Gateway sẽ gọi đến Lambda authorizer để xác thực client và trả về IAM policy để kiểm tra client đó có được quyền truy cập hay không.\nAPI Gateway hỗ trợ các tiêu chuẩn mở cho các cách xác thực như OAuth và SAML.\nThông thường, intentity provider được sử dụng để xác thực người gửi request đến API. Identity provider phải chịu trách nhiệm xác minh và trả về danh tính của người đó. Sau đó, nó sẽ được chuyến đền Lambda authorizer, nơi chịu trách nhiệm kiểm soát quyền truy cập API của bạn.\nTrong workshop này, chúng ta sẽ không triển khai identity provided, vì vậy, thay vào đó, chúng ta sẽ mock identity provider.\nJSON Web Token (JWT) Danh tính của người gọi API sẽ được biểu diễn bằng một JSON Web Token (JWT). Theo wikipedia, \u0026ldquo;A JWT is a compact, self-contained, signed JSON object. The JWT is typically used to represent an authenticated user\u0026rsquo;s identity.\u0026rdquo;\nExample JWT Một JWT token bao gồm 3 phần: header, payload và signature. Phần header và payload là những đối tượng dạng JSON. Phần signature là một chuỗi kí tự được sử dụng để xác thực phần header và payload.\nHeader: Loại token (typ) là JWT. Thuật toán (alg) là HS256, là sự kết hợp giữa HMAC cùng với SHA-256\n{\r\u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;,\r\u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;\r} Payload: Thuộc tính iss là tên của identity provider. Thuộc tính sub là tên của người gửi request. Thuộc tính scope là quyền của người gửi request. Thuộc tính jti là unique identifier cho JWT. Thuộc tính iat là thời gian mà token được tạo ra. Thuộc tính exp là thời gian mà token hết hạn.\n{\r\u0026#34;iss\u0026#34;: \u0026#34;getting-started-with-serverless\u0026#34;,\r\u0026#34;sub\u0026#34;: \u0026#34;minhnghia\u0026#34;,\r\u0026#34;scope\u0026#34;: \u0026#34;admins\u0026#34;,\r\u0026#34;jti\u0026#34;: \u0026#34;02343566e-8ff3-4a2d-ac18-c4d28ed96881\u0026#34;,\r\u0026#34;iat\u0026#34;: 1633433217,\r\u0026#34;exp\u0026#34;: 4070208800\r} Signature: R2D2RfY_n7OAcuONbpPfxqBY5IppEiGLCCfeQ_wz_2w Các giá trị này đều được mã hóa dạng base64 và nối với form của JWT bằng dấu \u0026ldquo;.\u0026rdquo;, ví dụ như sau:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI Bạn sẽ thấy token được gửi đến API Gateway endpoint bằng ứng dụng web và sử dụng HTTP Authorization header.\nCấu hình Lambda Authorizer Coppy đoạn code dưới đây và paste vào file app.js trong thư mục sam/src/auth.\nconst jwt = require(\u0026#39;njwt\u0026#39;)\rexports.handler = function (event, context, callback) {\rconsole.info(\u0026#39;received:\u0026#39;, event)\rconst token = event.authorizationToken.split(\u0026#39; \u0026#39;)[1]\rjwt.verify(token, \u0026#39;secretphrase\u0026#39;, (err, verifiedJwt) =\u0026gt; {\rif (err) {\rconsole.log(err.message)\rcallback(\u0026#39;Error: Invalid token\u0026#39;)\r} else {\rconsole.log(`Verified token: ${verifiedJwt}`)\rconst resource = `${event.methodArn.split(\u0026#39;/\u0026#39;, 2).join(\u0026#39;/\u0026#39;)}/*`\rconst policy = generatePolicy(verifiedJwt.body.sub, \u0026#39;Allow\u0026#39;, resource)\rconsole.log(`Generated policy: ${JSON.stringify(policy)}`)\rcallback(null, policy)\r}\r})\r}\rconst generatePolicy = function (principalId, effect, resource) {\rconst authResponse = {}\rauthResponse.principalId = principalId\rif (effect \u0026amp;\u0026amp; resource) {\rconst policyDocument = {}\rpolicyDocument.Version = \u0026#39;2012-10-17\u0026#39;\rpolicyDocument.Statement = []\rconst statementOne = {}\rstatementOne.Action = \u0026#39;execute-api:Invoke\u0026#39;\rstatementOne.Effect = effect\rstatementOne.Resource = resource\rpolicyDocument.Statement[0] = statementOne\rauthResponse.policyDocument = policyDocument\r}\rauthResponse.context = {\ruserId: 1,\rcreatedAt: new Date().toISOString()\r}\rreturn authResponse\r} "
},
{
	"uri": "/vi/5-portfwd/",
	"title": "Port Forwarding",
	"tags": [],
	"description": "",
	"content": "\rPort Forwarding là mốt cách thức hữu ích để chuyển hướng lưu lượng mạng từ 1 địa chỉ IP - Port này sang 1 địa chỉ IP - Port khác. Với Port Forwarding chúng ta có thể truy cập một EC2 instance nằm trong private subnet từ máy trạm của chúng ta.\nChúng ta sẽ cấu hình Port Forwarding cho kết nối RDP giữa máy của mình với Private Windows Instance nằm trong private subnet mà chúng ta đã tạo cho bài thực hành này.\nTạo IAM User có quyền kết nối SSM Truy cập vào giao diện quản trị dịch vụ IAM Click Users , sau đó click Add users. Tại trang Add user. Tại mục User name, điền Portfwd. Click chọn Access key - Programmatic access. Click Next: Permissions. Click Attach existing policies directly. Tại ô tìm kiếm , điền ssm. Click chọn AmazonSSMFullAccess. Click Next: Tags, click Next: Reviews. Click Create user. Lưu lại thông tin Access key ID và Secret access key để thực hiện cấu hình AWS CLI. Cài đặt và cấu hình AWS CLI và Session Manager Plugin Để thực hiện phần thực hành này, đảm bảo máy trạm của bạn đã cài AWS CLI và Session Manager Plugin\nBạn có thể tham khảo thêm bài thực hành về cài đặt và cấu hình AWS CLI tại đây.\nVới Windows thì khi giải nén thư mục cài đặt Session Manager Plugin bạn hãy chạy file install.bat với quyền Administrator để thực hiện cài đặt.\nThực hiện Portforwarding Chạy command dưới đây trong Command Prompt trên máy của bạn để cấu hình Port Forwarding. aws ssm start-session --target (your ID windows instance) --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region (your region) Thông tin Instance ID của Windows Private Instance có thể tìm được khi bạn xem chi tiết máy chủ EC2 Windows Private Instance.\nCâu lệnh ví dụ C:\\Windows\\system32\u0026gt;aws ssm start-session --target i-06343d7377486760c --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region ap-southeast-1 Nếu câu lệnh của bạn báo lỗi như dưới đây : SessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\nChứng tỏ bạn chưa cài Session Manager Plugin thành công. Bạn có thể cần khởi chạy lại Command Prompt sau khi cài Session Manager Plugin.\nKết nối tới Private Windows Instance bạn đã tạo bằng công cụ Remote Desktop trên máy trạm của bạn. Tại mục Computer: điền localhost:9999. Quay trở lại giao diện quản trị của dịch vụ System Manager - Session Manager. Click tab Session history. Chúng ta sẽ thấy các session logs với tên Document là AWS-StartPortForwardingSession. Chúc mừng bạn đã hoàn tất bài thực hành hướng dẫn cách sử dụng Session Manager để kết nối cũng như lưu trữ các session logs trong S3 bucket. Hãy nhớ thực hiện bước dọn dẹp tài nguyên để tránh sinh chi phí ngoài ý muốn nhé.\n"
},
{
	"uri": "/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa EC2 instance Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click chọn cả 2 instance Public Linux Instance và Private Windows Instance. Click Instance state. Click Terminate instance, sau đó click Terminate để xác nhận. Truy cập giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click chọn SSM-Role. Click Delete, sau đó điền tên role SSM-Role và click Delete để xóa role. Click Users. Click chọn user Portfwd. Click Delete, sau đó điền tên user Portfwd và click Delete để xóa user. Xóa S3 bucket Truy cập giao diện quản trị dịch vụ System Manager - Session Manager. Click tab Preferences. Click Edit. Kéo chuột xuống dưới. Tại mục S3 logging. Bỏ chọn Enable để tắt tính năng logging. Kéo chuột xuống dưới. Click Save. Truy cập giao diện quản trị dịch vụ S3 Click chọn S3 bucket chúng ta đã tạo cho bài thực hành. ( Ví dụ : lab-fcj-bucket-0001 ) Click Empty. Điền permanently delete, sau đó click Empty để tiến hành xóa object trong bucket. Click Exit. Sau khi xóa hết object trong bucket, click Delete Điền tên S3 bucket, sau đó click Delete bucket để tiến hành xóa S3 bucket. Xóa các VPC Endpoint Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Chọn 4 endpoints chúng ta đã tạo cho bài thực hành bao gồm SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. Tại ô confirm , điền delete. Click Delete để tiến hành xóa các endpoints. Click biểu tượng refresh, kiểm tra tất cả các endpoints đã bị xóa trước khi làm bước tiếp theo. Xóa VPC Truy cập vào giao diện quản trị dịch vụ VPC Click Your VPCs. Click chọn Lab VPC. Click Actions. Click Delete VPC. Tại ô confirm, điền delete để xác nhận, click Delete để thực hiện xóa Lab VPC và các tài nguyên liên quan. "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]